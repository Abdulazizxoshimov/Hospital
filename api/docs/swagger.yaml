definitions:
  entity.Appointment:
    properties:
      appointment_time:
        additionalProperties: true
        type: object
      createdAt:
        type: string
      doctorID:
        type: string
      id:
        type: integer
      status:
        type: string
      updatedAt:
        type: string
      userID:
        type: string
    type: object
  entity.Availability:
    properties:
      availableDate:
        type: string
      doctorID:
        type: string
      endTime:
        type: string
      id:
        type: integer
      isBooked:
        type: boolean
      startTime:
        type: string
    type: object
  entity.Doctor:
    properties:
      extraInfo:
        additionalProperties: true
        type: object
      id:
        type: string
      specialization:
        type: string
      userID:
        type: string
      working_hour:
        type: string
    type: object
  entity.Error:
    properties:
      message:
        type: string
    type: object
  entity.ListAppointments:
    properties:
      appointments:
        items:
          $ref: '#/definitions/entity.Appointment'
        type: array
      totalCount:
        type: integer
    type: object
  entity.ListAvailabilities:
    properties:
      availabilities:
        items:
          $ref: '#/definitions/entity.Availability'
        type: array
      totalCount:
        type: integer
    type: object
  entity.ListDoctorRes:
    properties:
      doctors:
        items:
          $ref: '#/definitions/entity.Doctor'
        type: array
      totalCount:
        type: integer
    type: object
  entity.ListUserRes:
    properties:
      totalCount:
        type: integer
      user:
        items:
          $ref: '#/definitions/entity.User'
        type: array
    type: object
  entity.Login:
    properties:
      password:
        example: '@Abdulaziz2004'
        type: string
      usernameoremail:
        example: abdulazizxoshimov22@gmail.com
        type: string
    type: object
  entity.ResetPassword:
    properties:
      email:
        type: string
      new_password:
        type: string
      otp:
        type: string
    type: object
  entity.TokenResp:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      role:
        type: string
      user_id:
        type: string
    type: object
  entity.UpdatePassword:
    properties:
      newPassword:
        type: string
      userID:
        type: string
    type: object
  entity.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      fullName:
        type: string
      id:
        type: string
      password:
        type: string
      phoneNumber:
        type: string
      refreshToken:
        type: string
      role:
        type: string
      userName:
        type: string
    type: object
  entity.UserCreateResponse:
    properties:
      id:
        type: string
    type: object
  entity.UserRegister:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  entity.UserResponse:
    properties:
      accesToken:
        type: string
      createdAt:
        type: string
      email:
        type: string
      fullName:
        type: string
      id:
        type: string
      phoneNumber:
        type: string
      refreshToken:
        type: string
      role:
        type: string
      userName:
        type: string
    type: object
  entity.UserUpdate:
    properties:
      email:
        type: string
      fullName:
        type: string
      id:
        type: string
      phoneNumber:
        type: string
      role:
        type: string
      userName:
        type: string
    type: object
info:
  contact: {}
  description: 'Contacs: https://t.me/Abuzada0401'
  title: Hospital
paths:
  /appointment:
    post:
      consumes:
      - application/json
      description: API for creating a new appointment
      parameters:
      - description: Appointment details
        in: body
        name: appointment
        required: true
        schema:
          $ref: '#/definitions/entity.Appointment'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.Appointment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Error'
      security:
      - BearerAuth: []
      summary: Create an appointment
      tags:
      - Appointment
    put:
      consumes:
      - application/json
      description: Api for getting list user
      parameters:
      - description: Appointment ID
        in: path
        name: id
        required: true
        type: integer
      - description: New appointment date
        in: query
        name: date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UserCreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Error'
      security:
      - BearerAuth: []
      summary: List User
      tags:
      - Appointment
  /appointment/{id}:
    delete:
      consumes:
      - application/json
      description: Api for getting list user
      parameters:
      - description: Appointment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.Error'
      security:
      - BearerAuth: []
      summary: List User
      tags:
      - Appointment
    get:
      consumes:
      - application/json
      description: Api for getting list user
      parameters:
      - description: Appointment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Appointment'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.Error'
      security:
      - BearerAuth: []
      summary: List User
      tags:
      - Appointment
  /appointments:
    get:
      consumes:
      - application/json
      description: Api for getting list user
      parameters:
      - description: Page
        in: query
        name: page
        required: true
        type: string
      - description: Limit
        in: query
        name: limit
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.ListAppointments'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Error'
      security:
      - BearerAuth: []
      summary: List User
      tags:
      - Appointment
  /availabilities:
    get:
      consumes:
      - application/json
      description: Api for getting list user
      parameters:
      - description: Page
        in: query
        name: page
        required: true
        type: string
      - description: Limit
        in: query
        name: limit
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.ListAvailabilities'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Error'
      security:
      - BearerAuth: []
      summary: List User
      tags:
      - Appointment
  /availability/{id}:
    get:
      consumes:
      - application/json
      description: Api for getting list user
      parameters:
      - description: doctor_availability ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Availability'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List User
      tags:
      - Appointment
  /doctor:
    post:
      consumes:
      - application/json
      description: CreateDoctor
      parameters:
      - description: Doctor info
        in: body
        name: doctor
        required: true
        schema:
          $ref: '#/definitions/entity.Doctor'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Error'
      security:
      - BearerAuth: []
      summary: Create Doctor
      tags:
      - doctors
    put:
      consumes:
      - application/json
      description: Update for doctor
      parameters:
      - description: Updated Doctor Info
        in: body
        name: doctor
        required: true
        schema:
          $ref: '#/definitions/entity.Doctor'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Error'
      security:
      - BearerAuth: []
      summary: Update Doctor
      tags:
      - doctors
  /doctor/{id}:
    delete:
      consumes:
      - application/json
      description: Delete for doctor
      parameters:
      - description: Doctor ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Error'
      summary: Delete Doctor
      tags:
      - doctors
    get:
      consumes:
      - application/json
      description: Get for doctor
      parameters:
      - description: Doctor ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Doctor'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.Error'
      security:
      - BearerAuth: []
      summary: Get Doctor
      tags:
      - doctors
  /doctors:
    get:
      consumes:
      - application/json
      description: get Doctors list
      parameters:
      - description: Page
        in: query
        name: page
        required: true
        type: string
      - description: Limit
        in: query
        name: limit
        required: true
        type: string
      - description: Name
        in: query
        name: name
        type: string
      - description: Specialization
        in: query
        name: specialization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.ListDoctorRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Error'
      security:
      - BearerAuth: []
      summary: List Doctors
      tags:
      - doctors
  /forgot/{email}:
    post:
      consumes:
      - application/json
      description: Api for sending otp
      parameters:
      - description: Email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Error'
      summary: Forget Password
      tags:
      - registration
  /login:
    post:
      consumes:
      - application/json
      description: Api for login user
      parameters:
      - description: Login Model
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/entity.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Error'
      summary: Login
      tags:
      - registration
  /register:
    post:
      consumes:
      - application/json
      description: Api for register user
      parameters:
      - description: Register User
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/entity.UserRegister'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/entity.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Error'
      summary: Register
      tags:
      - registration
  /reset-password:
    put:
      consumes:
      - application/json
      description: Api for reset password
      parameters:
      - description: Reset Password
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/entity.ResetPassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Error'
      summary: Reset Password
      tags:
      - registration
  /token/{refresh}:
    get:
      consumes:
      - application/json
      description: Api for updated acces token
      parameters:
      - description: Refresh Token
        in: path
        name: refresh
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.TokenResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/entity.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/entity.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Error'
      summary: New Token
      tags:
      - registration
  /user:
    post:
      consumes:
      - application/json
      description: Api for create a new user
      parameters:
      - description: Create User Model
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.UserRegister'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.UserCreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/entity.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Error'
      security:
      - BearerAuth: []
      summary: Create User
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Api for update a user
      parameters:
      - description: Update User Model
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.UserUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UserUpdate'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/entity.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Error'
      security:
      - BearerAuth: []
      summary: Update User
      tags:
      - users
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: Api for delete a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/entity.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Error'
      security:
      - BearerAuth: []
      summary: Delete User
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Api for getting a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/entity.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Error'
      security:
      - BearerAuth: []
      summary: Get User
      tags:
      - users
  /user/password:
    put:
      consumes:
      - application/json
      description: Api for updating user's password
      parameters:
      - description: Update User Password
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.UpdatePassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/entity.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Error'
      security:
      - BearerAuth: []
      summary: Update Password
      tags:
      - users
  /users:
    get:
      consumes:
      - application/json
      description: Api for getting list user
      parameters:
      - description: Page
        in: query
        name: page
        required: true
        type: string
      - description: Limit
        in: query
        name: limit
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.ListUserRes'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/entity.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Error'
      security:
      - BearerAuth: []
      summary: List User
      tags:
      - users
  /users/verify:
    post:
      consumes:
      - application/json
      description: Api for verify register
      parameters:
      - description: email
        in: query
        name: email
        required: true
        type: string
      - description: code
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Error'
      summary: Verify
      tags:
      - registration
  /verify:
    post:
      consumes:
      - application/json
      description: Api for verify user
      parameters:
      - description: Email
        in: query
        name: email
        required: true
        type: string
      - description: OTP
        in: query
        name: otp
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Error'
      summary: Verify OTP
      tags:
      - registration
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
